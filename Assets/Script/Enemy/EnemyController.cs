using UnityEngine;
using System.Collections.Generic;

public class EnemyController : MonoBehaviour
{
    [Header("Movement")]
    public float speed = 3f;
    
    [Header("üê¢ Slow Effect")]
    [SerializeField] private float currentSpeedMultiplier = 1f;
    
    private float baseSpeed; // T·ªëc ƒë·ªô g·ªëc
    private Transform target;
    private int wavepointIndex = 0;
    
    // ‚úÖ TRACKING SLOW EFFECTS (cho ph√©p nhi·ªÅu skills slow c√πng l√∫c)
    private Dictionary<WartortleSkill, float> activeSlowEffects = new Dictionary<WartortleSkill, float>();
    
    // ‚úÖ PROPERTY ƒê·ªÇ SkillController ƒê·ªåC WAYPOINT INDEX
    public int CurrentWaypointIndex => wavepointIndex;
    public int TotalWaypoints => ForwardPoints.points != null ? ForwardPoints.points.Length : 0;
    
    // ‚úÖ T√çNH % TI·∫æN ƒê·ªò ƒê·∫æN C·ª¨A (0-100%)
    public float ProgressPercent
    {
        get
        {
            if (TotalWaypoints == 0) return 0f;
            
            float baseProgress = (float)wavepointIndex / TotalWaypoints * 100f;
            
            // Th√™m kho·∫£ng c√°ch ƒë·∫øn waypoint ti·∫øp theo ƒë·ªÉ ch√≠nh x√°c h∆°n
            if (target != null && wavepointIndex < TotalWaypoints)
            {
                float distToNextWaypoint = Vector3.Distance(
                    new Vector3(transform.position.x, 0, transform.position.z),
                    new Vector3(target.position.x, 0, target.position.z)
                );
                
                // ∆Ø·ªõc l∆∞·ª£ng kho·∫£ng c√°ch gi·ªØa c√°c waypoint
                float waypointSpacing = 10f;
                if (wavepointIndex > 0 && wavepointIndex < TotalWaypoints)
                {
                    waypointSpacing = Vector3.Distance(
                        ForwardPoints.points[wavepointIndex - 1].position,
                        ForwardPoints.points[wavepointIndex].position
                    );
                }
                
                float subProgress = Mathf.Clamp01(1f - (distToNextWaypoint / waypointSpacing)) / TotalWaypoints * 100f;
                return baseProgress + subProgress;
            }
            
            return baseProgress;
        }
    }

    void Start()
    {
        baseSpeed = speed; // L∆∞u t·ªëc ƒë·ªô g·ªëc
        target = ForwardPoints.points[0];
    }

    void Update()
    {
        if (target == null) return;
        
        // Gi·ªØ nguy√™n Y hi·ªán t·∫°i, ch·ªâ t√≠nh kho·∫£ng c√°ch XZ
        Vector3 dir = target.position - transform.position;
        dir.y = 0f;

        // N·∫øu c√≥ h∆∞·ªõng di chuy·ªÉn th√¨ xoay enemy v·ªÅ ph√≠a ƒë√≥
        if (dir != Vector3.zero)
        {
            Quaternion lookRotation = Quaternion.LookRotation(dir);
            transform.rotation = Quaternion.Slerp(transform.rotation, lookRotation, Time.deltaTime * 10f);
        }

        // ‚úÖ DI CHUY·ªÇN V·ªöI T·ªêC ƒê·ªò ƒê√É B·ªä SLOW
        float currentSpeed = baseSpeed * currentSpeedMultiplier;
        transform.Translate(dir.normalized * currentSpeed * Time.deltaTime, Space.World);

        // Check kho·∫£ng c√°ch t·ªõi waypoint (XZ)
        if (Vector3.Distance(new Vector3(transform.position.x, 0, transform.position.z),
                             new Vector3(target.position.x, 0, target.position.z)) <= 0.2f)
        {
            GetNextWaypoint();
        }
    }

    void GetNextWaypoint()
    {
        if (wavepointIndex >= ForwardPoints.points.Length - 1)
        {
            Destroy(gameObject);
            return;
        }
        wavepointIndex++;
        target = ForwardPoints.points[wavepointIndex];
    }
    
    // ‚úÖ √ÅP D·ª§NG SLOW EFFECT
    public void ApplySlowEffect(WartortleSkill skill, float slowPercent)
    {
        if (!activeSlowEffects.ContainsKey(skill))
        {
            activeSlowEffects[skill] = slowPercent;
            UpdateSpeedMultiplier();
        }
    }
    
    // ‚úÖ X√ìA SLOW EFFECT
    public void RemoveSlowEffect(WartortleSkill skill)
    {
        if (activeSlowEffects.ContainsKey(skill))
        {
            activeSlowEffects.Remove(skill);
            UpdateSpeedMultiplier();
        }
    }
    
    // ‚úÖ C·∫¨P NH·∫¨T T·ªêC ƒê·ªò (l·∫•y slow effect m·∫°nh nh·∫•t)
    private void UpdateSpeedMultiplier()
    {
        if (activeSlowEffects.Count == 0)
        {
            currentSpeedMultiplier = 1f; // T·ªëc ƒë·ªô b√¨nh th∆∞·ªùng
        }
        else
        {
            // L·∫•y slow effect m·∫°nh nh·∫•t (gi√° tr·ªã nh·ªè nh·∫•t)
            float lowestMultiplier = 1f;
            foreach (var slowPercent in activeSlowEffects.Values)
            {
                if (slowPercent < lowestMultiplier)
                {
                    lowestMultiplier = slowPercent;
                }
            }
            currentSpeedMultiplier = lowestMultiplier;
        }
        
        Debug.Log($"üê¢ {gameObject.name} speed: {currentSpeedMultiplier * 100}% ({baseSpeed * currentSpeedMultiplier:F1} units/s)");
    }
}
